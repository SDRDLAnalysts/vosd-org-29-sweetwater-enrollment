TITLE: Sweetwater Union High School Transfers
UID: d756fd2e-1480-4e30-a355-5e8abe46358b
ACCESS: public
DATABASE: spatialite:sweetwater_enrollment.db

REMOTE: s3://warehouse.sandiegodata.org/voiceofsandiego.org#compress
LOCAL: sweetwater_enrollment

These views combine the counts of transfers between schools in the Sweetwater Union School District with enrollment statistics for the schools.  

# Files

The `sweetwater_transfers.csv` file has all of the transfers. 

EXTRACT: d02V003_swtransfers AS csv TO sweetwater_transfers.csv

These three files aggregate to the counts of transfer requests by status, and also present the counts adjusted for the population of either the origin or destination school. 

EXTRACT: adjusted_transfers AS csv TO adjusted_transfers.csv
EXTRACT: adjusted_arrivals AS csv TO adjusted_arrivals.csv
EXTRACT: adjusted_departures AS csv TO adjusted_departures.csv

The `sweet_schools` table has a mapping between the three letter codes used in the transfer data and the offician CDS code. 

EXTRACT: sweet_schools AS csv TO sweetwater_schools.csv

`Mean_income_by_school` presents the mean household income for the ACS 2012 blockgroups that intersect each school 
enrollment area. 

EXTRACT: mean_income_by_school AS csv TO mean_income_by_school.csv

# Geographic Files

These are support files for the school enrollment boundaries and ACS blockgroups

EXTRACT: d02y003_sws_boundaries AS shapefile to school_boundaries
EXTRACT: d02y003_sws_boundaries AS geojson to school_boundaries.geojson
EXTRACT: school_blockgroups AS geojson to school_blockgroups.geojson
EXTRACT: school_blockgroups AS kml to school_blockgroups.kml
EXTRACT: d025004_blockgroups AS kml to all_blockgroups.kml



PARTITIONS:

sweetwaterschools.org-transfers-2008e2015-swtransfers
sweetwaterschools.org-boundaries-sws_boundaries-geo
sweetwaterschools.org-boundaries-acs_cross
cde.ca.gov-schools-combined-public_schools
cde.ca.gov-enrollment-1993e-enroll09
blockgroups FROM census.gov-tigerline-2012-blockgroups-ca-geo-0.0.4 WHERE where countyfp = 73
census.gov-acs-geo-p5ye2012-geofile-0.0.3
census.gov-acs-p5ye2012-b01003-estimates-0.0.4 # Total Population
census.gov-acs-p5ye2012-b19001-estimates-0.0.4 # Household Income In The Past 12 Months (In 2012 Inflation-Adjusted Dollars)

MVIEW: sweet_schools

SELECT 
schools.id as public_school_id,
schools.cdscode,
code as trans_code,
ncesdist,
ncesschool,
statustype,
schools.county,
schools.district,
schools.school,
street,
streetabr,
city,
schools.zip,
schools.state,
latitude,
longitude,
enroll.id as enroll_id,
year as enroll_year,
ethnic,
gender,
kdgn,
gr_1,
gr_2,
gr_3,
gr_4,
gr_5,
gr_6,
gr_7,
gr_8,
ungr_elm,
gr_9,
gr_10,
gr_11,
gr_12,
ungr_sec,
enr_total,
adult
FROM d00a001_public_schools AS schools
JOIN d02W001_enroll09 AS enroll ON enroll.cds_code = schools.cdscode
JOIN d02V003_code_cross AS codes on codes.cdscode = schools.cdscode
WHERE ncesdist = 638640

DOC: 

Sweetwater schools, with the enrollment for each demographic category. `ncesdist = 638640` selects the Sweetwater high school district.


VIEW: sweet_enroll

SELECT 
cdscode, enroll_year,  sum(enr_total) as total_enroll, school, 
latitude, longitude, 
trans_code
FROM sweet_schools 
GROUP BY enroll_year, cdscode ;

DOC:

Total enrollment at the sweetwater schools, by year. The enrollment is collapsed across all deographic categories. 


VIEW: trans_counts

SELECT 
year, origin, dest, status, count(*) as count
FROM d02V003_swtransfers
GROUP BY year, origin, dest, status;

DOC:

Sums of transfer counts, aggregated for each year, origin, destination and status. 

VIEW: arrivals

SELECT 
year, dest, status, CAST(count(*) as INTEGER) as count
FROM d02V003_swtransfers
GROUP BY year, dest, status
ORDER BY year, dest, status;

DOC: 

Counts for all arrivals from a school

VIEW: departures 

SELECT 
year, origin, status, CAST(count(*)  as INTEGER) as count
FROM d02V003_swtransfers
GROUP BY year, origin, status;

DOC: 

Counts for all departures from a school



VIEW: adjusted_transfers

SELECT  
    trans_counts.year, 
    origin, 
    dest, 
    status, 
    origin_enroll.total_enroll as origin_enrolled,
    count,
    CAST( (CAST(count AS FLOAT)/CAST(origin_enroll.total_enroll AS FLOAT))* 100000 AS INTEGER ) AS origin_adj_count,
    dest_enroll.total_enroll as dest_enrolled,
    origin_enroll.school as origin_name, 
    dest_enroll.school as dest_name
FROM trans_counts
JOIN sweet_enroll as origin_enroll ON origin_enroll.trans_code = origin  AND trans_counts.year = origin_enroll.enroll_year
JOIN sweet_enroll as dest_enroll   ON dest_enroll.trans_code = dest    AND trans_counts.year = dest_enroll.enroll_year
;

DOC: 

Transfer numbers expressed as the rate per 100,000 students at the origin school

VIEW: adjusted_arrivals

SELECT  
    arrivals.year, 
    dest, 
    status, 
    dest_enroll.total_enroll as enrolled,
    count,
    CAST( (CAST(count AS FLOAT)/CAST(dest_enroll.total_enroll AS FLOAT))* 100000 AS INTEGER ) AS dest_adj_count,
    dest_enroll.total_enroll as dest_enrolled,
    dest_enroll.school as name
FROM arrivals
JOIN sweet_enroll as dest_enroll   ON dest_enroll.trans_code = dest    AND arrivals.year = dest_enroll.enroll_year
;

DOC: 

Arrivals to a school, expressed as the rate per 100,000 students at the destination school

VIEW: adjusted_departures

SELECT  
    departures.year, 
    origin, 
    status, 
    origin_enroll.total_enroll as enrolled,
    count,
    CAST( (CAST(count AS FLOAT)/CAST(origin_enroll.total_enroll AS FLOAT))* 100000 AS INTEGER ) AS origin_adj_count,
    origin_enroll.total_enroll as origin_enrolled,
    origin_enroll.school as name
FROM departures
JOIN sweet_enroll as origin_enroll   ON origin_enroll.trans_code = origin    AND departures.year = origin_enroll.enroll_year
;

DOC: 

Departures from a school, expressed as the rate per 100,000 students at the origin school

MVIEW: school_blockgroups

SELECT *
FROM d02y003_acs_cross AS acs_cross
JOIN d025004_blockgroups AS bg ON acs_cross.geoid = bg.geoid
JOIN d02V003_code_cross AS codes ON codes.boundary_id = acs_cross.sws_boundaries_id

VIEW: acs_income

SELECT 
    geo.geoid,
    b19001001 as total_households,
    ((b19001002 * (0 + 10000) / 2 ) +
    (b19001003 * (10000 + 14999) / 2 ) +
    (b19001004 * (15000 + 19999) / 2 ) +
    (b19001005 * (20000 + 24999) / 2 ) +
    (b19001006 * (25000 + 29999) / 2 ) +
    (b19001007 * (30000 + 34999) / 2 ) +
    (b19001008 * (35000 + 39999) / 2 ) +
    (b19001009 * (40000 + 44999) / 2 ) +
    (b19001010 * (45000 + 49999) / 2 ) +
    (b19001011 * (50000 + 59999) / 2 ) +
    (b19001012 * (60000 + 74999) / 2 ) +
    (b19001013 * (75000 + 99999) / 2 ) +
    (b19001014 * (100000 + 124999) / 2 ) +
    (b19001015 * (125000 + 149999) / 2 ) +
    (b19001016 * (150000 + 199999) / 2 ) +
    (b19001017 * (200000) )) AS total_income
FROM d02G003_geofile AS geo
JOIN d024004_b19001_estimates AS b19001 ON geo.stusab = b19001.stusab AND geo.logrecno = b19001.logrecno
WHERE geo.sumlevel = 150;

VIEW: mean_income_by_school

SELECT
    cdscode, name, total_households, total_income/total_households AS mean_income
FROM (
    SELECT 
        school_blockgroups.cdscode, school_blockgroups.name,
        sum(CAST(acs_income.total_income AS FLOAT)) AS total_income,
        sum(CAST(acs_income.total_households AS FLOAT)) AS total_households
    FROM d02G003_geofile AS geo
    JOIN d024004_b19001_estimates AS b19001 ON geo.stusab = b19001.stusab AND geo.logrecno = b19001.logrecno
    JOIN acs_income ON acs_income.geoid = geo.geoid
    JOIN school_blockgroups ON '15000US' || school_blockgroups.geoid = geo.geoid
    WHERE geo.sumlevel = 150
    GROUP BY cdscode 
)
ORDER BY mean_income DESC
;

VIEW: acs

SELECT 
    geo.geoid, geo.county, geo.state, geo.name, geo.stusab, geo.logrecno, 
    b01003e.*, 
    school_blockgroups.geometry, school_blockgroups.cdscode, school_blockgroups.name,
    b01003001 as total_population,

    CAST(CAST(acs_income.total_income AS FLOAT) /  CAST(acs_income.total_households AS FLOAT) AS FLOAT) AS mean_income
FROM d02G003_geofile AS geo
JOIN d024004_b01003_estimates AS b01003e ON geo.stusab = b01003e.stusab AND geo.logrecno = b01003e.logrecno
JOIN d024004_b19001_estimates AS b19001 ON geo.stusab = b19001.stusab AND geo.logrecno = b19001.logrecno
JOIN acs_income ON acs_income.geoid = geo.geoid
JOIN school_blockgroups ON '15000US' || school_blockgroups.geoid = geo.geoid
WHERE geo.sumlevel = 150;
